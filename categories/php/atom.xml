<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: php | Orlando PHP Group]]></title>
  <link href="http://orlandophp.github.io/categories/php/atom.xml" rel="self"/>
  <link href="http://orlandophp.github.io/"/>
  <updated>2014-08-30T11:11:41-04:00</updated>
  <id>http://orlandophp.github.io/</id>
  <author>
    <name><![CDATA[Orlando PHP User Group]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PHP 5.6 Basics]]></title>
    <link href="http://orlandophp.github.io/blog/2014/08/29/php-5-dot-6-basics/"/>
    <updated>2014-08-29T08:42:18-04:00</updated>
    <id>http://orlandophp.github.io/blog/2014/08/29/php-5-dot-6-basics</id>
    <content type="html"><![CDATA[<p>PHP 5.6.0 was released yesterday, which marks another milestone for PHP development. With it comes a nice set of new features and a few BC breaks. I&rsquo;ll go over some of the more prominent points and link to a list of everything for your deeper perusal. As for features, the most interesting to me are <em>improved handling of variatic functions</em> and <em>argument unpacking</em> with <code>...</code>, <em>constant scalar expressions</em>, <em>exponentiation</em>, and file downloads that can exceed <em>2 GB</em>. There are a few more, but these are, perhaps, the ones that the average developer may encounter/use on a regular basis.</p>

<!--more-->


<p>So, lets get down to some examples.</p>

<hr />

<h3>New Features</h3>

<h4>Improved handling of variadic functions and Argument unpacking with <code>...</code></h4>

<p>Variadic fuctions and argument unpacking are perhaps best explained through example.</p>

<p>We can indicate, in a function&rsquo;s parameter, that we are willing to accept any number of arguments by using the <code>...</code> (elipsis), which eliminates our need to rely on func_get_args().</p>

<pre><code class="php Variadic Function Example">function add_these(...$numbers) {
    echo array_sum($numbers);
}
add_these(1, 2, 3, 4, 5); // Will return 15
</code></pre>

<p><em>The <code>add_these</code> function will take any number of arguments we throw at it and within our function that <code>$numbers</code> variable becomes an array that can be passed to other functions or iterated through.</em></p>

<p>The variatic function&rsquo;s parameter can also be type-hinted.</p>

<pre><code class="php Variadic Function Example with Type Hinting">function display_users(User ...$users) {
    foreach ($users as $user) {
        echo $user-&gt;name . "\n";
        echo $user-&gt;email . "\n\n";
    }
}
display_users($users);
</code></pre>

<p><em>Given that <code>$users</code> is 2 User objects with a name and email property, we should see the following output.</em></p>

<pre><code class="bash Example Output">    John Doe
    john.doe@doezer.org

    Jane Doe
    jane.doe@doezer.org
</code></pre>

<p>Unpacking works similarly,</p>

<pre><code class="php Array Unpacking with '...'">function get_element($index, $array) {
    echo $array[$index];
}

$index = 4;
$numbers = [1, 2, 3, 4, 5];
$input = [$index, $numbers];
get_element(...$input); // displays '5'
</code></pre>

<p><em>So, passing an array into the function with a preceding <code>...</code> will use each index in the array as a different argument for the function.</em></p>

<p>Ok, a little take home for you. Consider this outout :</p>

<pre><code class="php Unpacking Homework">function get_element($index, ...$array) {
    echo $array[$index];
}

$input = [1, 2, 3, 4, 5];
get_element(...$input);
</code></pre>

<h4>Constant Scalar Expressions</h4>

<p>Typically, we&rsquo;re used to constants being static values:</p>

<pre><code class="php Typical, Pre-PHP 5.6 const Syntax">const THIS_IS_IT = 'It';
</code></pre>

<p>In PHP 5.6, you&rsquo;ll be able to provide an expression for constant values:</p>

<pre><code class="php New const Syntax with Scalar Expressions">const THIS_THING = 5 + 25;
const THIS_IS_NOT_IT = THIS_THING . " is not It";

echo THIS_IS_NOT_IT; // 30 is not It
</code></pre>

<h4>Exponentiation</h4>

<p>This feature is an addition to the math operators that basically provides a shortcut (and more readable text) for working with <code>pow()</code>. Essentially, if you&rsquo;ve used <code>pow(4, 5)</code>, you could now use <code>4**5</code> instead. All pretty straight forward.</p>

<p>For example:</p>

<h5>Previously:</h5>

<pre><code class="php Using 'pow()' for Exponentiation">$e = pow(2, 3);
echo $e; // 8
</code></pre>

<h5>Now:</h5>

<pre><code class="php New, shorter Syntax for Exponentiation">$e = 2**3;
echo $e; // 8
</code></pre>

<p><em><code>**</code> ends up a little more concise and seems easier to scan over (to me) than the <code>pow()</code> function.</em></p>

<h4>File downloads exceeding 2 GB</h4>

<p>With larger and more complex systems, higher resolution photos, and larger documents comes the need for larger uploads/downloads. Thank the PHP Lords for this one!</p>

<h4>Other goodies</h4>

<p>As for other goodies, go check out the <a href="http://php.net/manual/en/migration56.new-features.php">PHP 5.6</a> page for details and examples of the other features, including <em>GMP operator overloading</em>, the new <code>hash_equals()</code> function, bundled <em>phpdbg</em>, and the <em>new</em> magic method <code>__debugInfo()</code>, to name a few. Although this is a minor update, and there only seem to be a few changes, the changes that are being made with PHP are heralding the future of PHP.</p>

<hr />

<h3>Backward Compatability</h3>

<p>As for backward compatability, there are a few things that have be broken.</p>

<ul>
<li>For starters, Windows 2003 and XP are no longer supported (not too shocking).</li>
<li><code>self</code>, <code>parent</code>, and <code>static</code> are now <strong>always</strong> (lower) case sensitive.</li>
<li>The PHP logo GUIDs have been removed, effecting the following functions:</li>
</ul>


<pre><code class="php Removed GUID Logo Functions">    php_logo_guid();
    php_egg_logo_guid();
    php_real_logo_guid();
    zend_logo_guid();
</code></pre>

<ul>
<li>Plus, a few <a href="http://php.net/manual/en/migration55.incompatible.php">others</a></li>
</ul>


<hr />

<p>Pretty interesting changes so far, perhaps we&rsquo;ll still see one more minor version before PHP 7.</p>

<p>We&rsquo;d love to hear your comments below, so feel free to correct me, ask questions, or just rant!</p>

<p>Enjoy your weekend!</p>

<p>Patrick</p>
]]></content>
  </entry>
  
</feed>
